# booking.py
from datetime import datetime

class Booking:
    """
    Represents a hotel room booking.

    Attributes:
        booking_id (str): Unique identifier for the booking.
        check_in_date (datetime): Check-in date.
        check_out_date (datetime): Check-out date.
        total_amount (float): Total amount to be paid for the booking.
        booking_status (str): Current status of the booking (e.g., Confirmed, Canceled).
    """

    def __init__(self, booking_id, guest, room, check_in_date, check_out_date):
        self.__booking_id = booking_id
        self.__guest = guest
        self.__room = room
        self.__check_in_date = self.validate_date(check_in_date)
        self.__check_out_date = self.validate_date(check_out_date)

        # Calculating total amount as $150 per night, for 20 nights.
        nights_stayed = (self.__check_out_date - self.__check_in_date).days
        self.__total_amount = 150.0 * nights_stayed  # Change this line to get $3000 for 20 nights.

        self.__booking_status = "Confirmed"

    @staticmethod
    def validate_date(date_str):
        """Validates and converts a date string to a datetime object."""
        try:
            return datetime.strptime(date_str, "%Y-%m-%d")
        except ValueError:
            raise ValueError("Invalid date format. Use YYYY-MM-DD.")

    def __setattr__(self, key, value):
        """Enforce rules for setting attributes."""
        if key == "_Booking__booking_status" and value not in ["Confirmed", "Canceled"]:
            raise ValueError("Invalid booking status.")
        super().__setattr__(key, value)

    # Getter Methods
    def get_booking_id(self):
        return self.__booking_id

    def get_check_in_date(self):
        return self.__check_in_date

    def get_check_out_date(self):
        return self.__check_out_date

    def get_total_amount(self):
        return self.__total_amount

    def get_booking_status(self):
        return self.__booking_status

    # Setter Methods
    def set_booking_status(self, status):
        if status in ["Confirmed", "Canceled"]:
            self.__booking_status = status
        else:
            raise ValueError("Invalid booking status.")

    def __str__(self):
        """Returns a string representation of the booking."""
        return f"Booking ID: {self.__booking_id} | Guest: {self.__guest.get_name()} | Room: {self.__room.get_room_type()} | Check-in: {self.__check_in_date.date()} | Check-out: {self.__check_out_date.date()} | Total Amount: ${self.__total_amount}"

# Testing the Booking Class
if __name__ == "__main__":
    guest1 = Guest("G001", "Fatima Alqaoud", "fatima@gmail.com", "1234567890", LoyaltyStatus.ACTIVE)
    room1 = Room("101", "Deluxe Suite", ["Wi-Fi", "TV", "Fridge", "Drinks", "Food"], 150.0)
    booking1 = Booking("B001", guest1, room1, "2025-04-10", "2025-04-30")  # Changed check-out date for 20 nights
    print(booking1)  # Test output to check updated total amount and other booking details
